worker_processes auto;

events {
 worker_connections 1024;
}

http {
    resolver 127.0.0.11 valid=5s;
    limit_req_status 429;

    geo $limited_ip {
        default           1;
        ${MID_LAYER_IP}  0;
        ${MID_LAYER_IP_DEV} 0;
    }

    map $limited_ip $limit_ip {
        1        $binary_remote_addr;
        0        "";
    }

   geo $limited_server {
        default           1;
        ${MID_LAYER_IP}  0;
        ${MID_LAYER_IP_DEV} 0;
    }

    map $limited_server $limit_server {
        1        $server_name;
        0        "";
    }



    limit_conn_zone $server_name zone=cat_conn_total:10m;
    limit_conn_zone $binary_remote_addr zone=cat_conn_per_ip:10m;

    limit_conn cat_conn_total 2000;
    limit_conn cat_conn_per_ip 150;

    limit_req_zone $limit_server zone=cat_req_total:10m rate=1000r/s;
    limit_req_zone $limit_ip zone=cat_req_per_ip:10m rate=100r/s;

    limit_req zone=cat_req_total burst=400;
    limit_req zone=cat_req_per_ip burst=150;

    ssl_certificate     /etc/ssl/cat-cert;
    ssl_certificate_key /etc/ssl/cat-key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers      	HIGH:!ADH:!MD5;
    ssl_session_timeout 6h;
    ssl_session_cache shared:catSSL:20m;  # about 80000 sessions
    ssl_session_tickets off;
    server_tokens off;  # Hiding the nginx version

    # default server block (deny access to other domain/ip)
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_name _;
        return 444;
      }
    
    # HTTPS redirect block
    server {
        listen 80;

        #  need to change to appropriate domain name
        server_name ${UI_SERVER_NAME} ${API_SERVER_NAME};
        return 301 https://$host$request_uri;
    }

    # Main block
	server {
        listen              443 ssl;             
        server_name          ${API_SERVER_NAME}; 
        
        location / {
           
	    set $backend_servers ${API_SERVICE_NAME};
            # compression is supported in HTTP >=1.1
            proxy_http_version 1.1;
            # intercepts error code and displays error page from nginx
            proxy_intercept_errors on;
            proxy_pass ${API_SERVER_PROTOCOL}://$backend_servers:${API_SERVICE_PORT};

        }

        #error codes
        error_page 500 @error500;
        error_page 502 @error502;
        error_page 503 @error503;
        error_page 504 @error504;
        error_page 400 @error400;
        error_page 401 @error401;
        error_page 403 @error403;
        error_page 404 @error404;
        error_page 408 @error408;
        error_page 414 @error414;
        location @error500 {
            types {}
            default_type application/json;
            return 500 '{"error":{"code":500,"message":"Internal Server Error"}}';
        }


        location @error502 {
            types {}
            default_type application/json;
            return 502 '{"error":{"code":502,"message":"Bad Gateway"}}';
        }

        location @error503 {
            types {}
            default_type application/json;
            return 503 '{"error":{"code":503,"message":"Service Temporarily Unavailable"}}';
        }

        location @error504 {
            types {}
            default_type application/json;
            return 504 '{"error":{"code":504,"message":"Gateway Timeout"}}';
        }

        location @error400 {
            types {}
            default_type application/json;
            return 400 '{"error":{"code":400,"message":"Bad Request"}}';
        }

        location @error401 {
            types {}
            default_type application/json;
            return 401 '{"error":{"code":401,"message":"Unauthorized"}}';
        }

        location @error403 {
            types {}
            default_type application/json;
            return 403 '{"error":{"code":403,"message": "Forbidden"}}';
        }

        location @error404 {
            types {}
            default_type application/json;
            return 404 '{"error":{"code":404,"message":"Not Found"}}';
        }

        location @error408 {
            types {}
            default_type application/json;
            return 408 '{"error":{"code":408,"message":"Request Timeout"}}';
        }

        location @error414 {
            types {}
            default_type application/json;
            return 414 '{"error":{"code":414,"message":"URI too long"}}';

        }

    }
   
    # UI
	server {
        listen              443 ssl;
         
        #  need to change to appropriate domain name
        server_name ${UI_SERVER_NAME};
         
        # serving static content optimization
       	sendfile on;
        sendfile_max_chunk 1m;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;

        #inclusion of mime type for serving  files other than plain/html
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
         
        #compression
        gzip on;
        
        #root directory for static content 
        root /usr/share/app/iudx-catalogue-ui/;
        index index.html index.htm;
	

        location / {


            try_files $uri $uri/ /index.html;
        }

        location ~* \.(eot|ttf|woff|woff2)$ {
        
            add_header Access-Control-Allow-Origin *;
        }

        #error codes
        error_page 500 @error500;
        error_page 502 @error502;
        error_page 503 @error503;
        error_page 504 @error504;
        error_page 400 @error400;
        error_page 401 @error401;
        error_page 403 @error403;
        error_page 404 @error404;
        error_page 408 @error408;
        error_page 414 @error414;
        location @error500 {
            types {}
            default_type application/json;
            return 500 '{"error":{"code":500,"message":"Internal Server Error"}}';
        }


        location @error502 {
            types {}
            default_type application/json;
            return 502 '{"error":{"code":502,"message":"Bad Gateway"}}';
        }

        location @error503 {
            types {}
            default_type application/json;
            return 503 '{"error":{"code":503,"message":"Service Temporarily Unavailable"}}';
        }

        location @error504 {
            types {}
            default_type application/json;
            return 504 '{"error":{"code":504,"message":"Gateway Timeout"}}';
        }

        location @error400 {
            types {}
            default_type application/json;
            return 400 '{"error":{"code":400,"message":"Bad Request"}}';
        }

        location @error401 {
            types {}
            default_type application/json;
            return 401 '{"error":{"code":401,"message":"Unauthorized"}}';
        }

        location @error403 {
            types {}
            default_type application/json;
            return 403 '{"error":{"code":403,"message": "Forbidden"}}';
        }

        location @error404 {
            types {}
            default_type application/json;
            return 404 '{"error":{"code":404,"message":"Not Found"}}';
        }

        location @error408 {
            types {}
            default_type application/json;
            return 408 '{"error":{"code":408,"message":"Request Timeout"}}';
        }

        location @error414 {
            types {}
            default_type application/json;
            return 414 '{"error":{"code":414,"message":"URI too long"}}';

        }
    
    }
}
