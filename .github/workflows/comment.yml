name: Test API Server

on:
  issue_comment:
    types: [created, edited]  
jobs:
  check:
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
    if: startsWith(github.event.comment.body, '/test_') && github.event.issue.pull_request != null
    outputs:
      PERMISSIONS: ${{ steps.user_access.outputs.PERMISSIONS }}
    steps:
    - name: Check Comment
      id: com_chk
      run: |
        #!/bin/bash

        # Define the list of comments
        comments=("/test_rs" "/test_cat" "/test_fs" "/test_di" "/test_gis" )

        # Get the comment body from the event payload
        comment_body=$(jq -r ".comment.body" "$GITHUB_EVENT_PATH")

        # Check if the comment matches any of the defined comments
        for i in "${comments[@]}"
        do
          if [[ "$comment_body" == *"$i"* ]]; then
            # The comment matches one of the defined comments, so run the desired command
            echo "The comment matches \"$i\""
            echo "RESULT=TRUE" >> $GITHUB_ENV
            break
          fi
        done
        
    - name: check user access with mgs
      if: ${{ env.RESULT == 'TRUE' }}
      id: user_access
      run: |      
        #!/bin/bash
        # Get the permissions of the user who created the comment
        PERMISSIONS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.event.comment.user.login }}/permission" | jq -r ".permission")

        # Check if the user has write permission
        if [ "$PERMISSIONS" == "write" ]; then
          echo "User has write permission"
          echo "PERMISSIONS=granted" >> $GITHUB_OUTPUT
          
        elif  [ "$PERMISSIONS" == "admin" ]; then
          echo "User has admin permission"
          echo "PERMISSIONS=granted" >> $GITHUB_OUTPUT
        else
          echo "User does not have write permission"
          echo "PERMISSIONS=Not granted" >> $GITHUB_OUTPUT
          pr_number=$(jq -r ".issue.number" "$GITHUB_EVENT_PATH")
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -X POST -d "{\"body\":\"@${{ github.event.comment.user.login }} You are not authorized to trigger this workflow. Only users with write permission can trigger this workflow.\"}" "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
        fi
        

  deploy_rs:
    needs: check
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
    if: |
      needs.check.outputs.PERMISSIONS =='granted' &&
      (
       github.event.comment.body =='/test_rs'     
      )
    steps: 
    - name: Get Pull Request context
      id: extract_pr
      run: |        
        OWNER=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.owner.login')
        REPO=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.name')
        REF=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.ref')
        echo "OWNER=${OWNER}" >> $GITHUB_ENV
        echo "REPO=${REPO}" >> $GITHUB_ENV
        echo "REF=${REF}" >> $GITHUB_ENV       
        

    - name: Checkout PR API
      uses: actions/checkout@v3
      with:
        repository: ${{ env.OWNER }}/${{ env.REPO }}
        ref: ${{ env.REF }}       
          
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.24.8'
      id: install
      
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
      
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
         token: ${{ env.GITHUB_TOKEN }}

    
    - name: configure resource server
      run: |
        cp -r K8s-deployment/Charts/resource-server/example-secrets/* K8s-deployment/Charts/resource-server/
        echo "${{ secrets.RS_RESOURCE_VALUES }}" > K8s-deployment/Charts/resource-server/resource-values.yaml
        echo -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}"  > K8s-deployment/Charts/resource-server/secrets/AWS_SECRET_ACCESS_KEY
        echo -n "${{ secrets.AWS_ACCESS_KEY_ID }}" > K8s-deployment/Charts/resource-server/secrets/AWS_ACCESS_KEY_ID
        echo "${{ secrets.RS_CONFIG }}" | base64 --decode > K8s-deployment/Charts/resource-server/secrets/config.json
        echo "${{ secrets.RS_TEST_CONFIG }}" | base64 --decode > rs_test_config.json
        
    - name: deploy
      run: |
        cd K8s-deployment/Charts/resource-server/
        kubectl create ns rs-test
        kubectl create configmap rs-env --from-env-file=./secrets/.rs.env -n rs-test
        kubectl create secret generic rs-s3-env --from-file=./secrets/AWS_ACCESS_KEY_ID --from-file=./secrets/AWS_SECRET_ACCESS_KEY -n rs-test
        kubectl create secret generic rs-config --from-file=./secrets/config.json -n rs-test
        helm install resource-server "../resource-server" -f values.yaml -f resource-values.yaml -n rs-test
        
    - name: Install Testkube
      run: |
        wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add - && echo "deb https://repo.testkube.io/linux linux main" | sudo tee -a /etc/apt/sources.list && sudo apt-get update && sudo apt-get install -y testkube
        
    - name: Test Execute
      run: |
        datetime=$(date +"%Y-%m-%d-%H-%M-%S")
        testkube create executor --name pytest-executor-gh --namespace testkube --types pytest-executor-gh1/test-gh-1 --executor-type container --image docker.io/pranav0/testkube-executor-pytest:1.0.9 --command "pytest" --command "test_rs.py" --command "--html=/share/test/reports/rs_report.html" --feature artifacts --content-type string
        testkube create test --name "rs-test-${datetime}" --namespace testkube --file  rs_test_config.json --type pytest-executor-gh1/test-gh-1 --artifact-storage-class-name azuredisk-storage-class --artifact-volume-mount-path /share --artifact-dir test/reports
        testkube run test rs-test-${datetime} --download-artifacts
        echo "test_name=rs-test-${datetime}" >> $GITHUB_ENV 
        
    - name: Download Test reports
      run: |
        sleep 2m
        execution_output=$(tk get execution --test ${{ env.test_name }} --output json)
        result_id=$(echo $execution_output | jq -r '.results[0].id')
        kubectl testkube download artifacts $result_id
        
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: Test Reports
        path: artifacts/
        
    - name: Delete deployment
      run: |
       kubectl delete ns rs-test 
       testkube  delete executor pytest-executor-gh
    
    
  deploy_cat:
    needs: check
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
    if: |
      needs.check.outputs.PERMISSIONS =='granted' &&
      (
       github.event.comment.body =='/test_cat'     
      )
    steps:
    - name: Get Pull Request context
      id: extract_pr
      run: |        
        OWNER=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.owner.login')
        REPO=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.name')
        REF=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.ref')
        echo "OWNER=${OWNER}" >> $GITHUB_ENV
        echo "REPO=${REPO}" >> $GITHUB_ENV
        echo "REF=${REF}" >> $GITHUB_ENV       
        

    - name: Checkout PR API
      uses: actions/checkout@v3
      with:
        repository: ${{ env.OWNER }}/${{ env.REPO }}
        ref: ${{ env.REF }}
          
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.24.8'
      id: install
      
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
      
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
         token: ${{ env.GITHUB_TOKEN }}

    
    - name: configure resource server
      run: |
        cp -r K8s-deployment/Charts/catalogue/example-secrets/* K8s-deployment/Charts/catalogue/
        echo "${{ secrets.CAT_RESOURCE_VALUES }}" > K8s-deployment/Charts/catalogue/resource-values.yaml
        echo "${{ secrets.CAT_CONFIG }}" | base64 --decode > K8s-deployment/Charts/catalogue/secrets/config.json
        echo "${{ secrets.CAT_TEST_CONFIG }}" | base64 --decode > cat_test_config.json
        
    - name: deploy
      run: |
        cd K8s-deployment/Charts/catalogue/
        kubectl create ns cat-test
        kubectl create configmap cat-env --from-env-file=./secrets/.cat.env -n cat-test
        kubectl create secret generic cat-config --from-file=./secrets/config.json -n cat-test
        helm install catalogue-server ../catalogue -f values.yaml -f resource-values.yaml -n cat-test
        
    - name: Install Testkube
      run: |
        wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add - && echo "deb https://repo.testkube.io/linux linux main" | sudo tee -a /etc/apt/sources.list && sudo apt-get update && sudo apt-get install -y testkube
        
    - name: Test Execute
      run: |
        datetime=$(date +"%Y-%m-%d-%H-%M-%S")
        testkube create executor --name pytest-executor-gh --namespace testkube --types pytest-executor-gh1/test-gh-1 --executor-type container --image docker.io/pranav0/testkube-executor-pytest:1.0.9 --command "pytest" --command "test_cat.py" --command "--html=/share/test/reports/cat_report.html" --feature artifacts --content-type string
        testkube create test --name "cat-test-$(datetime)" --namespace testkube --file  cat_test_config.json --type pytest-executor-gh1/test-gh-1 --artifact-storage-class-name azuredisk-storage-class --artifact-volume-mount-path /share --artifact-dir test/reports
        testkube run test cat-test-$(datetime) --download-artifacts
        echo "test_name=cat-test-$(datetime)" >> $GITHUB_ENV 
        
    - name: Download Test reports
      run: |
        sleep 2m
        execution_output=$(tk get execution --test ${{ env.test_name }} --output json)
        result_id=$(echo $execution_output | jq -r '.results[0].id')
        kubectl testkube download artifacts $result_id
        
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: Test Reports
        path: artifacts/
        
    - name: Delete deployment
      run: |
       kubectl delete ns cat-test 
       testkube  delete executor pytest-executor-gh

  deploy_fs:
    needs: check
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
    if: |
      needs.check.outputs.PERMISSIONS =='granted' &&
      (
       github.event.comment.body =='/test_fs'     
      )
    steps: 
    - name: Get Pull Request context
      id: extract_pr
      run: |        
        OWNER=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.owner.login')
        REPO=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.name')
        REF=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.ref')
        echo "OWNER=${OWNER}" >> $GITHUB_ENV
        echo "REPO=${REPO}" >> $GITHUB_ENV
        echo "REF=${REF}" >> $GITHUB_ENV       
        

    - name: Checkout PR API
      uses: actions/checkout@v3
      with:
        repository: ${{ env.OWNER }}/${{ env.REPO }}
        ref: ${{ env.REF }}       
          
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.24.8'
      id: install
      
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
      
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
         token: ${{ env.GITHUB_TOKEN }}

    
    - name: configure resource server
      run: |
        cp -r K8s-deployment/Charts/resource-server/example-secrets/* K8s-deployment/Charts/resource-server/
        echo "${{ secrets.RS_RESOURCE_VALUES }}" > K8s-deployment/Charts/resource-server/resource-values.yaml
        echo -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}"  > K8s-deployment/Charts/resource-server/secrets/AWS_SECRET_ACCESS_KEY
        echo -n "${{ secrets.AWS_ACCESS_KEY_ID }}" > K8s-deployment/Charts/resource-server/secrets/AWS_ACCESS_KEY_ID
        echo "${{ secrets.RS_CONFIG }}" | base64 --decode > K8s-deployment/Charts/resource-server/secrets/config.json
        echo "${{ secrets.RS_TEST_CONFIG }}" | base64 --decode > rs_test_config.json
        
    - name: deploy
      run: |
        cd K8s-deployment/Charts/resource-server/
        kubectl create ns fs-test
        kubectl create configmap rs-env --from-env-file=./secrets/.rs.env -n fs-test
        kubectl create secret generic rs-s3-env --from-file=./secrets/AWS_ACCESS_KEY_ID --from-file=./secrets/AWS_SECRET_ACCESS_KEY -n fs-test
        kubectl create secret generic rs-config --from-file=./secrets/config.json -n fs-test
        helm install resource-server "../resource-server" -f values.yaml -f resource-values.yaml -n fs-test
        
    - name: Install Testkube
      run: |
        wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add - && echo "deb https://repo.testkube.io/linux linux main" | sudo tee -a /etc/apt/sources.list && sudo apt-get update && sudo apt-get install -y testkube
        
    - name: Test Execute
      run: |
        datetime=$(date +"%Y-%m-%d-%H-%M-%S")
        testkube create executor --name pytest-executor-gh --namespace testkube --types pytest-executor-gh1/test-gh-1 --executor-type container --image docker.io/pranav0/testkube-executor-pytest:1.0.9 --command "pytest" --command "test_fs.py" --command "--html=/share/test/reports/fs_report.html" --feature artifacts --content-type string
        testkube create test --name "fs-test-$(datetime)" --namespace testkube --file  fs_test_config.json --type pytest-executor-gh1/test-gh-1 --artifact-storage-class-name azuredisk-storage-class --artifact-volume-mount-path /share --artifact-dir test/reports
        testkube run test fs-test-$(datetime) --download-artifacts
        echo "test_name=fs-test-${datetime}" >> $GITHUB_ENV 
        
        
    - name: Download Test reports
      run: |
        sleep 2m
        execution_output=$(tk get execution --test ${{ env.test_name }} --output json)
        result_id=$(echo $execution_output | jq -r '.results[0].id')
        kubectl testkube download artifacts $result_id
        
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: Test Reports
        path: artifacts/
        
    - name: Delete deployment
      run: |
       kubectl delete ns fs-test 
       testkube  delete executor pytest-executor-gh
    
  deploy_di:
    needs: check
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
    if: |
      needs.check.outputs.PERMISSIONS =='granted' &&
      (
       github.event.comment.body =='/test_di'     
      )
    steps: 
    - name: Get Pull Request context
      id: extract_pr
      run: |        
        OWNER=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.owner.login')
        REPO=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.name')
        REF=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.ref')
        echo "OWNER=${OWNER}" >> $GITHUB_ENV
        echo "REPO=${REPO}" >> $GITHUB_ENV
        echo "REF=${REF}" >> $GITHUB_ENV       
        

    - name: Checkout PR API
      uses: actions/checkout@v3
      with:
        repository: ${{ env.OWNER }}/${{ env.REPO }}
        ref: ${{ env.REF }}  
          
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.24.8'
      id: install
      
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
      
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
         token: ${{ env.GITHUB_TOKEN }}

    
    - name: configure resource server
      run: |
        cp -r K8s-deployment/Charts/resource-server/example-secrets/* K8s-deployment/Charts/resource-server/
        echo "${{ secrets.RS_RESOURCE_VALUES }}" > K8s-deployment/Charts/resource-server/resource-values.yaml
        echo -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}"  > K8s-deployment/Charts/resource-server/secrets/AWS_SECRET_ACCESS_KEY
        echo -n "${{ secrets.AWS_ACCESS_KEY_ID }}" > K8s-deployment/Charts/resource-server/secrets/AWS_ACCESS_KEY_ID
        echo "${{ secrets.RS_CONFIG }}" | base64 --decode > K8s-deployment/Charts/resource-server/secrets/config.json
        echo "${{ secrets.RS_TEST_CONFIG }}" | base64 --decode > rs_test_config.json
        
    - name: deploy
      run: |
        cd K8s-deployment/Charts/resource-server/
        kubectl create ns rs-test
        kubectl create configmap rs-env --from-env-file=./secrets/.rs.env -n rs-test
        kubectl create secret generic rs-s3-env --from-file=./secrets/AWS_ACCESS_KEY_ID --from-file=./secrets/AWS_SECRET_ACCESS_KEY -n rs-test
        kubectl create secret generic rs-config --from-file=./secrets/config.json -n rs-test
        helm install resource-server "../resource-server" -f values.yaml -f resource-values.yaml -n rs-test
        
    - name: Install Testkube
      run: |
        wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add - && echo "deb https://repo.testkube.io/linux linux main" | sudo tee -a /etc/apt/sources.list && sudo apt-get update && sudo apt-get install -y testkube
        
    - name: Test Execute
      run: |
        datetime=$(date +"%Y-%m-%d-%H-%M-%S")
        testkube create executor --name pytest-executor-gh --namespace testkube --types pytest-executor-gh1/test-gh-1 --executor-type container --image docker.io/pranav0/testkube-executor-pytest:1.0.9 --command "pytest" --command "test_di.py" --command "--html=/share/test/reports/di_report.html" --feature artifacts --content-type string
        testkube create test --name "di-test-$(datetime)" --namespace testkube --file  di_test_config.json --type pytest-executor-gh1/test-gh-1 --artifact-storage-class-name azuredisk-storage-class --artifact-volume-mount-path /share --artifact-dir test/reports
        testkube run test di-test-$(datetime) --download-artifacts
        echo "test_name=di-test-${datetime}" >> $GITHUB_ENV
        
    - name: Download Test reports
      run: |
        sleep 2m
        execution_output=$(tk get execution --test ${{ env.test_name }} --output json)
        result_id=$(echo $execution_output | jq -r '.results[0].id')
        kubectl testkube download artifacts $result_id
        
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: Test Reports
        path: artifacts/
        
    - name: Delete deployment
      run: |
       kubectl delete ns rs-test 
       testkube  delete executor pytest-executor-gh
    
  deploy_gis:
    needs: check
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
    if: |
      needs.check.outputs.PERMISSIONS =='granted' &&
      (
       github.event.comment.body =='/test_gis'     
      )
    steps: 

    - name: Get Pull Request context
      id: extract_pr
      run: |        
        OWNER=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.owner.login')
        REPO=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.name')
        REF=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.ref')
        echo "OWNER=${OWNER}" >> $GITHUB_ENV
        echo "REPO=${REPO}" >> $GITHUB_ENV
        echo "REF=${REF}" >> $GITHUB_ENV       
        

    - name: Checkout PR API
      uses: actions/checkout@v3
      with:
        repository: ${{ env.OWNER }}/${{ env.REPO }}
        ref: ${{ env.REF }}       

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.24.8'
      id: install
      
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
      
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
         token: ${{ env.GITHUB_TOKEN }}

    
    - name: configure resource server
      run: |
        cp -r K8s-deployment/Charts/resource-server/example-secrets/* K8s-deployment/Charts/resource-server/
        echo "${{ secrets.RS_RESOURCE_VALUES }}" > K8s-deployment/Charts/resource-server/resource-values.yaml
        echo -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}"  > K8s-deployment/Charts/resource-server/secrets/AWS_SECRET_ACCESS_KEY
        echo -n "${{ secrets.AWS_ACCESS_KEY_ID }}" > K8s-deployment/Charts/resource-server/secrets/AWS_ACCESS_KEY_ID
        echo "${{ secrets.RS_CONFIG }}" | base64 --decode > K8s-deployment/Charts/resource-server/secrets/config.json
        echo "${{ secrets.RS_TEST_CONFIG }}" | base64 --decode > rs_test_config.json
        
    - name: deploy
      run: |
        cd K8s-deployment/Charts/resource-server/
        kubectl create ns gis-test
        kubectl create configmap rs-env --from-env-file=./secrets/.rs.env -n gus-test
        kubectl create secret generic rs-s3-env --from-file=./secrets/AWS_ACCESS_KEY_ID --from-file=./secrets/AWS_SECRET_ACCESS_KEY -n gis-test
        kubectl create secret generic rs-config --from-file=./secrets/config.json -n gis-test
        helm install resource-server "../resource-server" -f values.yaml -f resource-values.yaml -n gis-test
        
    - name: Install Testkube
      run: |
        wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add - && echo "deb https://repo.testkube.io/linux linux main" | sudo tee -a /etc/apt/sources.list && sudo apt-get update && sudo apt-get install -y testkube
        kubectl testkube get test
        pwd
        
    - name: Test Execute
      run: |
        datetime=$(date +"%Y-%m-%d-%H-%M-%S")
        testkube create executor --name pytest-executor-gh --namespace testkube --types pytest-executor-gh1/test-gh-1 --executor-type container --image docker.io/pranav0/testkube-executor-pytest:1.0.9 --command "pytest" --command "test_gis.py" --command "--html=/share/test/reports/gis_report.html" --feature artifacts --content-type string
        testkube create test --name "gis-test-$(datetime)" --namespace testkube --file  gis_test_config.json --type pytest-executor-gh1/test-gh-1 --artifact-storage-class-name azuredisk-storage-class --artifact-volume-mount-path /share --artifact-dir test/reports
        testkube run test gis-test-$(datetime) --download-artifacts
        echo "test_name=gis-test-${datetime}" >> $GITHUB_ENV 
        
    - name: Download Test reports
      run: |
        sleep 2m
        execution_output=$(tk get execution --test  ${{ env.test_name }} --output json)
        result_id=$(echo $execution_output | jq -r '.results[0].id')
        kubectl testkube download artifacts $result_id
        
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: Test Reports
        path: artifacts/
        
    - name: Delete deployment
      run: |
       kubectl delete ns gis-test 
       testkube  delete executor pytest-executor-gh
    
            
