name: Test Resource Server

on:
  issue_comment:
    types: [created,edited]  
jobs:
  build:
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
    if: contains(github.event.comment.body, '/test_rs') && github.event.issue.pull_request != null
    steps:
    - name: check user access with mgs
      run: |      
        #!/bin/bash
        # Get the permissions of the user who created the comment
        PERMISSIONS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.event.comment.user.login }}/permission" | jq -r ".permission")

        # Check if the user has write permission
        if [ "$PERMISSIONS" == "write" ]; then
          echo "User has write permission"
        else
          echo "User does not have write permission"
          pr_number=$(jq -r ".issue.number" "$GITHUB_EVENT_PATH")
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -X POST -d "{\"body\":\"@${{ github.event.comment.user.login }} You are not authorized to trigger this workflow. Only users with write permission can trigger this workflow.\"}" "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
        fi
      
    - name: Get Pull Request context
      id: extract_pr
      run: |        
        OWNER=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.owner.login')
        REPO=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.repo.name')
        REF=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}| jq -r '.head.ref')
        echo "OWNER=${OWNER}" >> $GITHUB_ENV
        echo "REPO=${REPO}" >> $GITHUB_ENV
        echo "REF=${REF}" >> $GITHUB_ENV       
        

    - name: Checkout PR API
      uses: actions/checkout@v3
      with:
        repository: ${{ env.OWNER }}/${{ env.REPO }}
        ref: ${{ env.REF }}       
        
    - name: List Files
      run: |
          pwd
          ls -a
          ls .github/workflows
          git branch
          echo $GITHUB_REPOSITORY
          echo $GITHUB_WORKSPACE
          env
    

          
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.24.8'
      id: install
      
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
      
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
         token: ${{ env.GITHUB_TOKEN }}


    - name: configure resource server
      run: |
        cp -r K8s-deployment/Charts/resource-server/example-secrets/* K8s-deployment/Charts/resource-server/
        echo "${{ secrets.RS_RESOURCE_VALUES }}" > K8s-deployment/Charts/resource-server/resource-values.yaml
        echo -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}"  > K8s-deployment/Charts/resource-server/secrets/AWS_SECRET_ACCESS_KEY
        echo -n "${{ secrets.AWS_ACCESS_KEY_ID }}" > K8s-deployment/Charts/resource-server/secrets/AWS_ACCESS_KEY_ID
        echo "${{ secrets.RS_CONFIG }}" | base64 --decode > K8s-deployment/Charts/resource-server/secrets/config.json
        echo "${{ secrets.RS_TEST_CONFIG }}" | base64 --decode > rs_test_config.json
        
    - name: deploy
      run: |
        cd K8s-deployment/Charts/resource-server/
        kubectl create ns rs-test
        kubectl create configmap rs-env --from-env-file=./secrets/.rs.env -n rs-test
        kubectl create secret generic rs-s3-env --from-file=./secrets/AWS_ACCESS_KEY_ID --from-file=./secrets/AWS_SECRET_ACCESS_KEY -n rs-test
        kubectl create secret generic rs-config --from-file=./secrets/config.json -n rs-test
        helm install resource-server "../resource-server" -f values.yaml -f resource-values.yaml -n rs-test
        
    - name: Install Testkube
      run: |
        wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add - && echo "deb https://repo.testkube.io/linux linux main" | sudo tee -a /etc/apt/sources.list && sudo apt-get update && sudo apt-get install -y testkube
        kubectl testkube get test
        pwd
        
    - name: Test Execute
      run: |
        testkube create executor --name pytest-executor-gh --namespace testkube --types pytest-executor-gh1/test-gh-1 --executor-type container --image docker.io/pranav0/testkube-executor-pytest:1.0.9 --command "pytest" --command "test_rs.py" --command "--html=/share/test/reports/rs_report.html" --feature artifacts --content-type string
        testkube create test --name "rs-test-$(date +'%Y-%m-%d_%H-%M-%S')" --namespace testkube --file  rs_test_config.json --type pytest-executor-gh1/test-gh-1 --artifact-storage-class-name azuredisk-storage-class --artifact-volume-mount-path /share --artifact-dir test/reports
        testkube run test rs-test --download-artifacts
        ls -a
        
    - name: Download Test reports
      run: |
        sleep 2m
        execution_output=$(tk get execution --test rs-test --output json)
        result_id=$(echo $execution_output | jq -r '.results[0].id')
        kubectl testkube download artifacts $result_id
        
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: Test Reports
        path: artifacts/
        
    - name: Delete deployment
      run: |
       kubectl delete ns rs-test 
       testkube  delete executor pytest-executor-gh
    
