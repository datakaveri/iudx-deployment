apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: rabbitmq
spec:
  serviceName: rabbitmq-headless
  replicas: 3
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      nodeSelector:
        beta.kubernetes.io/instance-type: c5.large
      serviceAccountName: rabbitmq
      terminationGracePeriodSeconds: 10
      initContainers:
      # Since k8s 1.9.4, config maps mount read-only volumes. Since the Docker image also writes to the config file,
      # the file must be mounted as read-write. We use init containers to copy from the config map read-only
      # path, to a read-write path
      - name: "rabbitmq-config"
        image: busybox:1.32.0
        volumeMounts:
        - name: rabbitmq-config
          mountPath: /tmp/rabbitmq
        - name: rabbitmq-config-rw
          mountPath: /etc/rabbitmq
        command:
        - sh
        - -c
        # the newline is needed since the Docker image entrypoint scripts appends to the config file
        - cp /tmp/rabbitmq/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf && echo '' >> /etc/rabbitmq/rabbitmq.conf;
          cp /tmp/rabbitmq/enabled_plugins /etc/rabbitmq/enabled_plugins
      # read-write volume into which to copy the rabbitmq.conf and enabled_plugins files
      # this is needed since the docker image writes to the rabbitmq.conf file
      # and Kubernetes Config Maps are mounted as read-only since Kubernetes 1.9.4
    
      # The Docker image runs as the `rabbitmq` user with uid 999 
      # and writes to the `rabbitmq.conf` file
      # The security context is needed since the image needs
      # permission to write to this file. Without the security 
      # context, `rabbitmq.conf` is owned by root and inaccessible
      # by the `rabbitmq` user
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
      containers:
      - name: rabbitmq-k8s
        image: rabbitmq:3.10.5-management
        volumeMounts:
          - name: certs
            mountPath: /certs/
          - name: rabbitmq-definition-file
            mountPath: /secrets/
          - name: rabbitmq-data
            mountPath: /var/lib/rabbitmq/mnesia
          - name: rabbitmq-config-rw
            mountPath: /etc/rabbitmq
        ports:
          - name: https
            containerPort: 15671
          - name: amqps
            containerPort: 5671
          - name: amqp
            containerPort: 5672
          - name: http
            containerPort: 15672
          - name: prometheus
            containerPort: 15692
            protocol: TCP
          - name: epmd
            containerPort: 4369
            protocol: TCP
          - name: cluster-rpc
            containerPort: 25672
            protocol: TCP
        livenessProbe:
          exec:
            command: ["rabbitmq-diagnostics", "status"]
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 15
        readinessProbe:
          exec:
            command: ["rabbitmq-diagnostics", "ping"]
          initialDelaySeconds: 20
          periodSeconds: 60
          timeoutSeconds: 10
        # imagePullPolicy: Always
        env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          - name: K8S_SERVICE_NAME
            value: rabbitmq-headless
          - name: RABBITMQ_NODENAME
            value: rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
          - name: K8S_HOSTNAME_SUFFIX
            value: .$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
          - name: RABBITMQ_ERLANG_COOKIE
            valueFrom:
              secretKeyRef:
                name: rabbitmq-erlang-cookie
                key: .erlang.cookie     
        resources:
          limits:
            cpu: "1800m"
            memory: "3.8Gi"
          requests:
            cpu: "1500m"
            memory: "3Gi"
      volumes:
        - name: certs
          secret:
            secretName: certs
        - name: rabbitmq-definition-file
          secret:
            secretName: rabbitmq-definition-file
        - name: rabbitmq-erlang-cookie
          secret:
            secretName: rabbitmq-erlang-cookie
            items:
            - key: .erlang.cookie
              path: .erlang.cookie
        - name: rabbitmq-config
          configMap:
            name: rabbitmq-config
            items:
            - key: rabbitmq.conf
              path: rabbitmq.conf
            - key: enabled_plugins
              path: enabled_plugins
              
        - name: rabbitmq-config-rw
          emptyDir: {}      
        - name: rabbitmq-data
          persistentVolumeClaim:
            claimName: rabbitmq-data

  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "ebs-storage-class"
      resources:
        requests:
          storage: 20Gi
