ingress:
  hostname: cat-hostname
  annotations: {
    cert-manager.io/cluster-issuer: "letsencrypt-staging" # use letsencrypt-prod if proper letsencrypt certs are required
  }
## ApiServer resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param apiServer.resources.limits The resources limits for the ApiServer containers
## @param apiServer.resources.requests The requested resources for the ApiServer containers
##
apiServer:
  enabled: true
  resources:
    limits:
      cpu: 800m
      memory: 750Mi
    requests:
      cpu: 600m
      memory: 600Mi

  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s

## Auditing resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param auditing.resources.limits The resources limits for the Auditing containers
## @param auditing.resources.requests The requested resources for the Auditing containers
##
auditing:
  enabled: true
  resources:
    limits:
      cpu: 400m
      memory: 600Mi
    requests:
      cpu: 300m
      memory: 400Mi

  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s

## Authenticator resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param authenticator.resources.limits The resources limits for the Authenticator containers
## @param authenticator.resources.requests The requested resources for the Authenticator containers
##
authenticator:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 600Mi
    requests:
      cpu: 300m
      memory: 400Mi

  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s

## Database resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param database.resources.limits The resources limits for the Database containers
## @param database.resources.requests The requested resources for the Database containers
##
database:
  enabled: true
  resources:
    limits:
      cpu: 600m
      memory: 750Mi
    requests:
      cpu: 400m
      memory: 400Mi

  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s

## Validator resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param validator.resources.limits The resources limits for the Validator containers
## @param validator.resources.requests The requested resources for the Validator containers
##
validator:
  enabled: true
  resources:
    limits:
      cpu: 800m
      memory: 800Mi
    requests:
      cpu: 600m
      memory: 600Mi
  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s

## geocoding resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param geocoding.resources.limits The resources limits for the geocoding containers
## @param geocoding.resources.requests The requested resources for the geocoding containers
##
geocoding:
  enabled: true
  resources:
    limits:
      cpu: 800m
      memory: 750Mi
    requests:
      cpu: 600m
      memory: 600Mi

  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s

## nlpSearch resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param nlpSearch.resources.limits The resources limits for the nlpSearch containers
## @param nlpSearch.resources.requests The requested resources for the nlpSearch containers
##
nlpSearch:
  enabled: true
  resources:
    limits:
      cpu: 800m
      memory: 750Mi
    requests:
      cpu: 600m
      memory: 600Mi

  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s


## rating resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param rating.resources.limits The resources limits for the rating containers
## @param rating.resources.requests The requested resources for the rating containers
##


rating:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 600Mi
    requests:
      cpu: 400m
      memory: 400Mi
  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s
## databroker resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param databroker.resources.limits The resources limits for the rating containers
## @param databroker.resources.requests The requested resources for the rating containers
##


databroker:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 600Mi
    requests:
      cpu: 400m
      memory: 400Mi

  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s

## profanityCheckSdk resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param profanityCheckSdk.resources.limits The resources limits for the rating containers
## @param profanityCheckSdk.resources.requests The requested resources for the rating containers
##


profanityCheckSdk:
  enabled: false
  resources:
    limits:
      cpu: 500m
      memory: 750Mi
    requests:
      cpu: 400m
      memory: 600Mi
  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s


## mlayer resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param mlayer.resources.limits The resources limits for the rating containers
## @param mlayer.resources.requests The requested resources for the rating containers
##


mlayer:
  enabled: true
  resources:
    limits:
      cpu: 400m
      memory: 600Mi
    requests:
      cpu: 300m
      memory: 400Mi

  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s


## postgres resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param postgres.resources.limits The resources limits for the rating containers
## @param postgres.resources.requests The requested resources for the rating containers
##


postgres:
  enabled: true
  resources:
    limits:
      cpu: 600m
      memory: 600Mi
    requests:
      cpu: 400m
      memory: 400Mi
  nodeSelector:
    node.kubernetes.io/instance-type: Standard_B2s
