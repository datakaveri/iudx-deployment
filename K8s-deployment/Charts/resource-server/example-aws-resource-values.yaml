ingress:
  hostname: rs-hostname
  annotations: {
    cert-manager.io/cluster-issuer: "letsencrypt-staging" # use letsencrypt-prod if proper letsencrypt certs are required
  }
  
## apiServer resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param apiServer.resources.limits The resources limits for the apiServer containers
## @param apiServer.resources.requests The requested resources for the apiServer containers
##
apiServer:
  enabled: true
  nodeSelector:
    node.kubernetes.io/instance-type: t3a.medium
  resources:
    limits:
      cpu: 1000m
      memory: 1200Mi
    requests: 
      cpu: 700m
      memory: 1200Mi

## archivesDatabase resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param archivesDatabase.resources.limits The resources limits for the archivesDatabase containers
## @param archivesDatabase.resources.requests The requested resources for the archivesDatabase containers
##
archivesDatabase:
  enabled: true
  nodeSelector:
    node.kubernetes.io/instance-type: t3a.medium
  resources:
    limits:
      cpu: 1000m
      memory: 1.5Gi
    requests: 
      cpu: 700m
      memory: 1.5Gi

## authenticator resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param authenticator.resources.limits The resources limits for the authenticator containers
## @param authenticator.resources.requests The requested resources for the authenticator containers
##
authenticator:
  enabled: true
  nodeSelector:
    node.kubernetes.io/instance-type: t3a.medium
  resources:
    limits:
      cpu: 600m
      memory: 750Mi
    requests: 
      cpu: 500m
      memory: 500Mi

## databroker resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param databroker.resources.limits The resources limits for the databroker containers
## @param databroker.resources.requests The requested resources for the databroker containers
##
databroker:
  enabled: true
  nodeSelector:
    node.kubernetes.io/instance-type: t3a.medium
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests: 
      cpu: 400m
      memory: 400Mi

## encryption resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param encryption.resources.limits The resources limits for the encryption containers
## @param encryption.resources.requests The requested resources for the encryption containers
##
encryption:
  enabled: true
  nodeSelector:
    node.kubernetes.io/instance-type: t3a.medium
  resources:
    limits:
      cpu: 600m
      memory: 900Mi
    requests: 
      cpu: 500m
      memory: 700Mi

## latestDatabase resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param latestDatabase.resources.limits The resources limits for the latestDatabase containers
## @param latestDatabase.resources.requests The requested resources for the latestDatabase containers
##
latestDatabase:
  enabled: true
  nodeSelector:
    node.kubernetes.io/instance-type: t3a.medium
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests: 
      cpu: 800m
      memory: 800Mi

## metering resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param metering.resources.limits The resources limits for the metering containers
## @param metering.resources.requests The requested resources for the metering containers
##
metering:
  enabled: true
  nodeSelector:
    node.kubernetes.io/instance-type: t3a.medium
  resources:
    limits:
      cpu: 700m
      memory: 1Gi
    requests: 
      cpu: 500m
      memory: 800Mi

## postgres resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param postgres.resources.limits The resources limits for the postgres containers
## @param postgres.resources.requests The requested resources for the postgres containers
##
postgres:
  enabled: true
  nodeSelector:
    node.kubernetes.io/instance-type: t3a.medium
  resources:
    limits:
      cpu: 600m
      memory: 600Mi
    requests: 
      cpu: 400m
      memory: 400Mi

## cache resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param cache.resources.limits The resources limits for the cache containers
## @param cache.resources.requests The requested resources for the cache containers
##
cache:
  enabled: true
  nodeSelector:
    node.kubernetes.io/instance-type: t3a.medium
  resources:
    limits:
      cpu: 400m
      memory: 750Mi
    requests: 
      cpu: 200m
      memory: 600Mi

## async resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param async.resources.limits The resources limits for the async containers
## @param async.resources.requests The requested resources for the async containers
##
async:
  enabled: true
  nodeSelector:
    node.kubernetes.io/instance-type: t3a.medium
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests: 
      cpu: 800m
      memory: 800Mi

  extraVolumes:
    - name: rs-config
      secret:
        secretName: rs-config
    - name: async-dir
      persistentVolumeClaim:
        claimName: efs-pvc
    - name: rs-tmp
      emptyDir:
        medium: Memory
  extraVolumeMounts: 
    - name: rs-config
      mountPath: /usr/share/app/secrets/configs
    - name: async-dir
      mountPath: "/usr/share/app/storage/temp-dir"
    - name: rs-tmp
      mountPath: /tmp
  persistentVolumeClaim:
    name: efs-pvc
    storageClassName: efs-storage-class
    resources:
      requests:
        storage: 50Gi
